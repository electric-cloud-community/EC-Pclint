# -*-Perl-*-

# emmaSystemTests.ntest -
#
# ECPclint
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;

# system tests

require "$::gTestFileDir/Pclint-common.ntest";

$::grunMavenCreated = 0;
$::gProjectImported = 0;
$::gtestProjectName = 'PclintTestProject';

my $outcome = "";

sub importProject() {
    assertOK(
             $::N->import(
                          {
                            file =>"$::gTestFileDir/PclintSystemTests.xml",
                            path  => "/projects/PclintTestProject",
                            force => 1
                          }
                         ),
             "import runCommandLine"
            );

    assertOK($::N->getProcedure($::gtestProjectName, 'runPclintCreateLintProject'),"runPclintCreateLintProject procedure doesn't exist");
    assertOK($::N->getProcedure($::gtestProjectName, 'runPclintHtml'),"runPclintHtml procedure doesn't exist");
    assertOK($::N->getProcedure($::gtestProjectName, 'runPclintIgnoreMultipleWarnings'),"runPclintIgnoreMultipleWarnings procedure doesn't exist");
    assertOK($::N->getProcedure($::gtestProjectName, 'runPclintIgnoreWarning'),"runPclintIgnoreWarning procedure doesn't exist");
    assertOK($::N->getProcedure($::gtestProjectName, 'runPclintWithAdditionalOptions'),"runPclintWithAdditionalOptions procedure doesn't exist");
    assertOK($::N->getProcedure($::gtestProjectName, 'runPclintWithRequiredOptions'),"runPclintWithRequiredOptions procedure doesn't exist");
    assertOK($::N->getProcedure($::gtestProjectName, 'runPclintXml'),"runPclintXml procedure doesn't exist");
    
    $::gProjectImported = 1;
}

sub doSetup() {

    if(!$::gProjectImported) {
        importProject();
    }

}

ntest "runPclintCreateLintProject", {}, sub {

    doSetup();

    # run test job

    my $xpath = $::N->runProcedure(
        $::gtestProjectName,
        {
          procedureName => "runPclintCreateLintProject",
          pollInterval  => '1',
          timeout => 600,
          actualParameter => [

          ]
        }
    );

    # make sure it finished
    my $jobId = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure has errors');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # get the value of the commands lines
    my $commandLine = $xpath->findvalue("//property[propertyName='commandLine']/value");
    my $projectcommandLine = $xpath->findvalue("//property[propertyName='projectCommandLine']/value");

    assertEq($commandLine, '"C:/lint/lint-nt.exe" -w3 C:/lint/test2/pclinttest.cpp',"command line doesn't match expected output");

    assertEq($projectcommandLine, '"C:/lint/lint-nt.exe" "C:/lint/test2/consoleapp/consoleapp/consoleapp.vcproj" >"C:/lint/test2/project.lnt"',"command line doesn't match expected output");

};

ntest "runPclintHtml", {}, sub {

    doSetup();

    # run test job

    my $xpath = $::N->runProcedure(
        $::gtestProjectName,
        {
          procedureName => "runPclintHtml",
          pollInterval  => '1',
          timeout => 600,
          actualParameter => [

          ]
        }
    );

    # make sure it finished
    my $jobId = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure has errors');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # get the value of the commands lines
    my $commandLine = $xpath->findvalue("//property[propertyName='commandLine']/value");

    my $expectedCmdLine = '"C:/lint/lint-nt.exe" -w3 +html C:/lint/test2/pclinttest.cpp > "N:/runPclintCreateLintProject-23-201107261543/report.html"';

    #to avoid the timestamp directory generated by the working dir
    assertEq(substr($commandLine, 0, index($commandLine, '>')),substr($expectedCmdLine, 0, index($expectedCmdLine, '>')),"command line doesn't match expected output");

};


ntest "runPclintIgnoreMultipleWarnings", {}, sub {

    doSetup();

    # run test job

    my $xpath = $::N->runProcedure(
        $::gtestProjectName,
        {
          procedureName => "runPclintIgnoreMultipleWarnings",
          pollInterval  => '1',
          timeout => 600,
          actualParameter => [

          ]
        }
    );

    # make sure it finished
    my $jobId = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure has errors');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # get the value of the commands lines
    my $commandLine = $xpath->findvalue("//property[propertyName='commandLine']/value");

    assertEq($commandLine, '"C:/lint/lint-nt.exe" -w3 -e414 -e831 C:/lint/test2/pclinttest.cpp',"command line doesn't match expected output");

};


ntest "runPclintIgnoreWarning", {}, sub {

    doSetup();

    # run test job

    my $xpath = $::N->runProcedure(
        $::gtestProjectName,
        {
          procedureName => "runPclintIgnoreWarning",
          pollInterval  => '1',
          timeout => 600,
          actualParameter => [

          ]
        }
    );

    # make sure it finished
    my $jobId = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure has errors');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # get the value of the commands lines
    my $commandLine = $xpath->findvalue("//property[propertyName='commandLine']/value");

    assertEq($commandLine, '"C:/lint/lint-nt.exe" -w3 -e414 C:/lint/test2/pclinttest.cpp',"command line doesn't match expected output");

};

ntest "runPclintWithAdditionalOptions", {}, sub {

    doSetup();

    # run test job

    my $xpath = $::N->runProcedure(
        $::gtestProjectName,
        {
          procedureName => "runPclintWithAdditionalOptions",
          pollInterval  => '1',
          timeout => 600,
          actualParameter => [

          ]
        }
    );

    # make sure it finished
    my $jobId = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure has errors');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # get the value of the commands lines
    my $commandLine = $xpath->findvalue("//property[propertyName='commandLine']/value");

    assertEq($commandLine, '"C:/lint/lint-nt.exe" -w3 -passes(4) C:/lint/test2/pclinttest.cpp',"command line doesn't match expected output");

};

ntest "runPclintWithRequiredOptions", {}, sub {

    doSetup();

    # run test job

    my $xpath = $::N->runProcedure(
        $::gtestProjectName,
        {
          procedureName => "runPclintWithRequiredOptions",
          pollInterval  => '1',
          timeout => 600,
          actualParameter => [

          ]
        }
    );

    # make sure it finished
    my $jobId = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure has errors');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # get the value of the commands lines
    my $commandLine = $xpath->findvalue("//property[propertyName='commandLine']/value");

    assertEq($commandLine, '"C:/lint/lint-nt.exe" -w3 C:/lint/test2/pclinttest.cpp',"command line doesn't match expected output");

};


ntest "runPclintXml", {}, sub {

    doSetup();

    # run test job

    my $xpath = $::N->runProcedure(
        $::gtestProjectName,
        {
          procedureName => "runPclintXml",
          pollInterval  => '1',
          timeout => 600,
          actualParameter => [

          ]
        }
    );

    # make sure it finished
    my $jobId = 0;
    my $status = "";

    assertOK($xpath, 'runProcedure has errors');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # get the value of the commands lines
    my $commandLine = $xpath->findvalue("//property[propertyName='commandLine']/value");
    
    assertEq($commandLine, '"C:/lint/lint-nt.exe" -w3 +xml(doc) C:/lint/test2/pclinttest.cpp',"command line doesn't match expected output");
    
};

